#!/usr/bin/python

import argparse
import sys
import math
import time
import datetime
from sets import Set
from pbsmon import getnodes, getclusters, getjobs, getqueues
from pbsmon import runtime
from pbsmon import Size
from pbsmon import monitor

def _ls_cmd(args):
	if args.cluster:
		nodes = getnodes(args.cluster)
		# print nodes in cluster
		for node in nodes:
			print(node.get('hostname'))
	else:
		# print all clusters
		clusters = getclusters()
		for c in clusters:
			print(c)

def _queues_cmd(args):
	queues = getqueues(args.cluster)
	for q in queues:
		print(q)

def _cpuutil_cmd(args):
	if args.by_user:
		return _cpuutil_by_user(args)
	nodes = getnodes(args.cluster)
	fmt = '{0:<20} {1:>10}/{2:<10} {3:<20}'
	total_used = total_available = 0
	for node in nodes:
		total_used += node.get('resources_assigned.ncpus', 0)
		total_available += node.get('resources_available.ncpus', 0)
		print fmt.format(
			node.get('hostname'),
			node.get('resources_assigned.ncpus', 0),
			node.get('resources_available.ncpus', 0),
			node.get('state', ''))
	print('-----------------------------')
	print(fmt.format('total:', total_used, total_available, ''))

def _cpuutil_by_user(args):
	jobs = getjobs(args.cluster)
	jobs = [j for j in jobs if j.get('job_state','') == 'R']
	cpu_per_user = {}
	for j in jobs:
		user = j.get('user')
		ncpus = j.get('resources_used.ncpus', 0)
		cpu_per_user[user] = cpu_per_user.get(user, 0) + ncpus

	for user, ncpus in cpu_per_user.items():
		print('{0:<20} {1:10}'.format(user, ncpus))

def _memutil_cmd(args):
	if args.by_user:
		return _memutil_by_user(args)
	nodes = getnodes(args.cluster)
	fmt = '{0:<20} {1:>10}/{2:<10} {3:>20}'
	total_used = total_available = Size('0kb')

	for node in nodes:
		used = node.get('resources_assigned.mem', Size('0kb'))
		available = node.get('resources_available.mem', Size('0kb'))
		total_used += used
		total_available += available
		print fmt.format(
			node.get('hostname'),
			used,
			available,
			node.get('state', ''))
	print('-----------------------------')
	print(fmt.format('total:', total_used, total_available, ''))

def _memutil_by_user(args):
	jobs = getjobs(args.cluster)
	jobs = [j for j in jobs if j.get('job_state','') == 'R']
	mem_per_user = {}
	for j in jobs:
		user = j.get('user')
		mem_list = j.get('resource_list.mem', Size('0kb'))
		mem_used  = j.get('resources_used.mem', Size('0kb'))
		if not user in mem_per_user:
			mem_per_user[user] = (Size('0kb'), Size('0kb'))
		mem_per_user[user] = (
			mem_per_user.get(user)[0] + mem_used,
			mem_per_user.get(user)[1] + mem_list
		)

	for user, mem in mem_per_user.items():
		print('{0:<20} {1:>10}/{2}'.format(user, mem[0], mem[1]))


def _walltime0_cmd(args):
	jobs = getjobs(args.cluster)
	for j in jobs:
		if j.get('job_state') == 'R' and j.get('resources_used.walltime').total_seconds() == 0:
			print j.get('Id')

def _cputime_low_cmd(args):
	jobs = getjobs(args.cluster)
	for j in jobs:
		state = j.get('job_state')
		walltime = j.get('resources_used.walltime')
		cputime  = j.get('resources_used.cput')
		if state == 'R' and walltime.total_seconds() > 120:
			if (cputime.total_seconds()/walltime.total_seconds()) < args.k:
				print j.get('id')

def _runtime_cmd(args):
	for job, stats in runtime.outliers(args.cluster, args.user, args.k):
		if job == None:
			time.sleep(60)
			continue
		id = job.get('id')
		jobname = job.get('job_name')
		walltime = job.get('resources_used.walltime')
		stats = map(lambda x: x.total_seconds(), stats)
		print('{0}: {1}: ended in {2} seconds, similar jobs ended in {3}'.format(
			id, jobname,
			walltime.total_seconds(),
			stats))

def _memabuse_cmd(args):
	def nodesWithUnusedCores(nodes):
		return [n for n in nodes if n.get('resources_assigned.ncpus') < n.get('resources_available.ncpus')]
	def checkmemabuse(node, jobs):
		# calculate the average memory each job takes
		memory_sum = 0
		memory_avg = 0
		njobs = 0
		users = []
		node_host = node.get('hostname', 'n/a')
		used = node.get('resources_assigned.mem', Size('0kb'))
		available = node.get('resources_available.mem', Size('0kb'))
		for j in jobs:
			if j.get('exec_host', '').split('/')[0] == node_host:
				memory_sum += j.get('resource_list.mem', Size.frombytes(0)).bytes()
				njobs += 1
				users.append(j.get('user', ''))
		if njobs > 0:
			memory_avg = memory_sum/float(njobs)
	fmt = '{0:<20} {1:>10}/{2:<10} {3:>20}'
		if memory_sum + memory_avg > available.bytes():
			print("{0:<20}{1:<5} jobs{2:>10}/{3:<10} {4}".format(
				node_host,
				njobs,
				used,
				available
				','.join(Set(users))))
	
	jobs = getjobs(args.cluster)
	nodes = getnodes(args.cluster)

	for node in nodesWithUnusedCores(nodes):
		checkmemabuse(node, jobs)

def _monitor_cmd(args):
	def alertfn(to, msg):
		print("%s : to: %s, msg: %s" % (datetime.datetime.now().ctime(), to, msg))
	monitor.run(args.cluster, alertfn)
			
def _main():
	# command arguments parsers
	parser = argparse.ArgumentParser(prog='pbsmon')
	parser._positionals.title = 'commands'
	parser._optionals.title = 'flags'
	subparsers = parser.add_subparsers()

	# ls sub command
	ls_description="""List all nodes in cluster (i.e. tamir-short).
	If cluster is omitted, List all clusters"""

	ls_parser = subparsers.add_parser('ls', help="List clusters and nodes in cluster", description=ls_description)
	ls_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	ls_parser.set_defaults(func=_ls_cmd)

	ls_parser._positionals.title = 'arguments'
	ls_parser._optionals.title = 'flags'

	# queues sub command
	queues_description="""List all queues in cluster (i.e. tamir-short).
	If cluster is omitted, List all queues"""

	queues_parser = subparsers.add_parser('queues', help="List queues in cluster", description=queues_description)
	queues_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	queues_parser.set_defaults(func=_queues_cmd)

	queues_parser._positionals.title = 'arguments'
	queues_parser._optionals.title = 'flags'

	# cpuutil sub command
	cpuutil_description="""Display CPU utilization info for nodes in cluster (i.e. tamir-short).
	If cluster is omitted, display CPU utilization for all nodes"""

	cpuutil_parser = subparsers.add_parser('cpuutil', help="Display cluster's CPU utilization",
						description=cpuutil_description)
	cpuutil_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	cpuutil_parser.add_argument('-u', '--by-user', action='store_true', dest='by_user', help='cpu utilization by user')
	cpuutil_parser.set_defaults(func=_cpuutil_cmd)

	cpuutil_parser._positionals.title = 'arguments'
	cpuutil_parser._optionals.title = 'flags'

	# memutil sub command
	memutil_description="""Display Memory utilization info for nodes in cluster (i.e. tamir-short).
	If cluster is omitted, display Memory utilization for all nodes"""

	memutil_parser = subparsers.add_parser('memutil', help="Display cluster's Memory utilization",
						description=memutil_description)
	memutil_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	memutil_parser.add_argument('-u', '--by-user', action='store_true', dest='by_user', help='memory utilization by user usage/requested')
	memutil_parser.set_defaults(func=_memutil_cmd)

	memutil_parser._positionals.title = 'arguments'
	memutil_parser._optionals.title = 'flags'

	# walltime0 sub command
	walltime0_description="""List jobs with status R and Walltime 00:00:00"""

	walltime0_parser = subparsers.add_parser('walltime0', help="List running jobs with walltime 0",
						description=walltime0_description)
	walltime0_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	walltime0_parser.set_defaults(func=_walltime0_cmd)

	walltime0_parser._positionals.title = 'arguments'
	walltime0_parser._optionals.title = 'flags'

	# cputime_low sub command
	cputime_low_description="""List jobs with cputime/walltime ratio smaller than k"""

	cputime_low_parser = subparsers.add_parser('cputime', help="List running jobs low cputime",
						description=cputime_low_description)
	cputime_low_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	cputime_low_parser.add_argument('-k', type=float, dest='k', default=.5, help='minimum utilization ratio (default: .5)')
	cputime_low_parser.set_defaults(func=_cputime_low_cmd)

	cputime_low_parser._positionals.title = 'arguments'
	cputime_low_parser._optionals.title = 'flags'

	# runtime-outliers sub command
	runtime_description="""Long running process to locate jobs that ended too quickly or too slowly
	relative to similar jobs. Uses outlier detection"""

	runtime_parser = subparsers.add_parser('runtime-outliers', help="List jobs with unlikely runtime",
						description=runtime_description)
	runtime_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	runtime_parser.add_argument('-u', '--user', type=str, dest='user', help='jobs by username')
	runtime_parser.add_argument('-k', type=float, dest='k', default=1.5, help='outlier detection constant (default: 1.5)')
	runtime_parser.set_defaults(func=_runtime_cmd)

	runtime_parser._positionals.title = 'arguments'
	runtime_parser._optionals.title = 'flags'

	# memabuse sub command
	memabuse_description="""List servers with memory abuse"""

	memabuse_parser = subparsers.add_parser('memabuse', help="List servers with memory abuse",
						description=memabuse_description)
	memabuse_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='', nargs='?')
	memabuse_parser.set_defaults(func=_memabuse_cmd)

	memabuse_parser._positionals.title = 'arguments'
	memabuse_parser._optionals.title = 'flags'

	# monitor sub command
	monitor_description="""monitor simulation"""

	monitor_parser = subparsers.add_parser('monitor', help="monitor simulation",
						description=monitor_description)
	monitor_parser.add_argument('cluster', help='cluster name (i.e. tamir-short)', default='tamir-nano4', nargs='?')
	monitor_parser.set_defaults(func=_monitor_cmd)

	monitor_parser._positionals.title = 'arguments'
	monitor_parser._optionals.title = 'flags'

	# print help when no arguments supplied
	if len(sys.argv) == 1:
		parser.print_help()
		sys.exit(1)

	# execute
	args = parser.parse_args()
	args.func(args)

if __name__ == "__main__":
	_main()
